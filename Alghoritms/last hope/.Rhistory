x=5
x
x=NULL
x<-
1
setwd("~/Dropbox/Data Mining/last hope")
sort([2,3,1])
sort(c(2,3,1))
sort(([1,2],[0,2],[3,3]))
sort(((1,2),(0,2),(3,3))
sort(c(3,2,1),decreasing = FALSE)
sort(c(3,2,1),decreasing = TRUE)
sort(c(3,2,1),decreasing = FALSE)
initClusters <- read.csv("importantClusters.csv")
initClusters <- read.csv("important_Clusters.csv")
View(initClusters)
View(initClusters)
initClusters <- initClusters[,-2]
closestCluster <- function(point,clusters){
distance <- 1:nrow(clusters)
clusters <- cbind(clusters,distance)
for(i in 1:nrow(clusters)){
clusters[i,"distance"] <- HaversineDistance(as.numeric(clusters[3]),as.numeric(clusters[2]),as.numeric(point[2]),as.numeric(point[1]))
}
}
point<-[41,-8]
point<-c(41,-8)
closestCluster(point,initClusters)
HaversineDistance=function(lat1,lon1,lat2,lon2)
{
#returns the distance in km
REarth<-6371
lat<-abs(lat1-lat2)*pi/180
lon<-abs(lon1-lon2)*pi/180
lat1<-lat1*pi/180
lat2<-lat2*pi/180
a<-sin(lat/2)*sin(lat/2)+cos(lat1)*cos(lat2)*sin(lon/2)*sin(lon/2)
d<-2*atan2(sqrt(a),sqrt(1-a))
d<-REarth*d
return(d)
}
closestCluster(point,initClusters)
View(initClusters)
point<- vector(41,-8)
point<-c(41,-8)
point[1]
point[2]
closestCluster <- function(point,clusters){
distance <- 1:nrow(clusters)
clusters <- cbind(clusters,distance)
for(i in 1:nrow(clusters)){
clusters[i,"distance"] <- HaversineDistance(as.numeric(clusters[3]),as.numeric(clusters[2]),as.numeric(point[2]),as.numeric(point[1]))
}
# return clusters[1,"X"] cio? l'indice del cluster pi? vicino
}
closestCluster(point,initClusters)
closestCluster <- function(point,clusters){
distance <- 1:nrow(clusters)
clusters <- cbind(clusters,distance)
for(i in 1:nrow(clusters)){
clusters[i,"distance"] <- HaversineDistance(as.numeric(clusters[3,]),as.numeric(clusters[2,]),as.numeric(point[2]),as.numeric(point[1]))
}
# return clusters[1,"X"] cio? l'indice del cluster pi? vicino
}
closestCluster(point,initClusters)
closestCluster <- function(point,clusters){
distance <- 1:nrow(clusters)
clusters <- cbind(clusters,distance)
for(i in 1:nrow(clusters)){
clusters[i,4] <- HaversineDistance(as.numeric(clusters[3]),as.numeric(clusters[2]),as.numeric(point[2]),as.numeric(point[1]))
}
# return clusters[1,"X"] cio? l'indice del cluster pi? vicino
}
closestCluster(point,initClusters)
closestCluster <- function(point,clusters){
distance <- 1:nrow(clusters)
actual_cluster <- cbind(clusters,distance)
for(i in 1:nrow(clusters)){
actual_cluster[i,"distance"] <- HaversineDistance(as.numeric(clusters[3]),as.numeric(clusters[2]),as.numeric(point[2]),as.numeric(point[1]))
}
# return clusters[1,"X"] cio? l'indice del cluster pi? vicino
}
closestCluster(point,initClusters)
closestCluster <- function(point,clusters){
distance <- 1:nrow(clusters)
clusters <- cbind(clusters,distance)
for(i in 1:nrow(clusters)){
actual_cluster <- clusters[i,]
clusters[i,4] <- HaversineDistance(as.numeric(actual_cluster[3]),as.numeric(actual_cluster[2]),as.numeric(point[2]),as.numeric(point[1]))
}
# riordinare in base alla distanza
# return clusters[1,"X"] cio? l'indice del cluster pi? vicino
}
closestCluster(point,initClusters)
clusters<-closestCluster(point,initClusters)
closestCluster <- function(point,clusters){
distance <- 1:nrow(clusters)
clusters <- cbind(clusters,distance)
for(i in 1:nrow(clusters)){
actual_cluster <- clusters[i,]
clusters[i,4] <- HaversineDistance(as.numeric(actual_cluster[3]),as.numeric(actual_cluster[2]),as.numeric(point[2]),as.numeric(point[1]))
}
return (clusters);
# riordinare in base alla distanza
# return clusters[1,"X"] cio? l'indice del cluster pi? vicino
}
clusters<-closestCluster(point,initClusters)
sort(clusters)
View(clusters)
point<-c(-8,41)
clusters<-closestCluster(point,initClusters)
View(clusters)
sort(clusters[4])
sort(clusters[,4])
cluster
clusters[,4]
clust<-sort(clusters[,4])
clust
clust<-NULL
?sort
?min
min(clusters[,4])
View(initClusters)
View(initClusters)
?atan
?atan2
