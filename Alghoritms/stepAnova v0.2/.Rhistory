dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
### EVALUATION ###
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
View(train_ready)
plot(fit_lat)
summary(fit_lat)
gc()
ls
train_full <- read.csv(paste(getwd(),"/../original data/train.csv",sep=""),stringsAsFactors=FALSE)
test <- create_test(tail(train_full,2000))
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
test <- create_test(tail(train_full,2000))
answer <- create_answer(tail(train_full,2000))
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
test <- create_test(tail(train_full,2000))
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
test <- create_test(tail(train_full,2000))
test[,is.na()]
test[,is.na]
test[,is.na($POLYLINE)]
test[,is.na(test$POLYLINE)]
test[is.na(test$POLYLINE),]
View(test)
View(test)
View(answer)
answer[is.na(answer$LATITUDE),]
answer[is.na(answer$LONGITUDE),]
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
test <- create_test(tail(train_full,2000))
test[is.na(test$POLYLINE),]
View(test)
test[is.na(test$TRIP_ID),]
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
test <- create_test(tail(train_full,2000))
test[is.na(test$TRIP_ID),]
tail(train_full,2000)[is.na(tail(train_full,2000),)]
tail(train_full,2000)[is.na(tail(train_full,2000)),]
View(tail(train_full,2000))
View(tail(train_full,1000))
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
test <- create_test(tail(train_full,2000))
test[is.na(test$TRIP_ID),]
test <- test[-1,]
View(test)
test <- test[-1,]
View(test)
data <- tail(train_full,2000)
test <- data.frame(TRIP_ID=data$TRIP_ID, POLYLINE=1:rows)
test <- data.frame(TRIP_ID=data$TRIP_ID, POLYLINE=1:2000)
test[is.na(test$TRIP_ID),]
for(i in 1:2000){if(nrow(positions(test[i,]))=0) print(i)}
for(i in 1:2000){if(nrow(positions(test[i,]))==0) print(i)}
source('~/.active-rstudio-document')
test <- create_test(tail(train_full,2000))
test[is.na(test$TRIP_ID),]
test[is.na(test$POLYLINE),]
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
answer <- create_answer(tail(train_full,2000))
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
answer <- create_answer(tail(train_full,2000))
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
answer <- create_answer(tail(train_full,2000))
test <- create_test(tail(train_full,2000))
load("tree_long_split5_cp001")
load("tree_lat_split5_cp001")
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- positions(test[i,])
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0, end=1)
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
step <- 5
gap <- 3
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- positions(test[i,])
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0, end=1)
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
source("stepAnova_utils.r")
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- positions(test[i,])
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0, end=1)
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
evaluation <- evaluate(prediction,answer)
print(evaluation)
gc()
rm(answer,data,test,prediction,test_trip,trip)
rm(dest)
rm(fit_lat,fit_long)
gc()
dist <- function(x,y) abs(x-y)
x <- c(1 5 6 50)
x <- c(1, 5, 6, 50)
x <- data.frame(x)
x
i <- 1:4
i <- 1:3
dist(x[i,1],x[i+1,1])
dist(x[i,1],x[i+1,1]) > 3
x[dist(x[i,1],x[i+1,1]) > 3]
x[dist(x[i,1],x[i+1,1]) > 3,]
x[-(dist(x[i,1],x[i+1,1]) < 3),]
x$x>3
x[x$x>3,]
x
x[,x$x>3]
x <- cbind(x,1:4)
x
x[x$x>3,]
source("evaluation_script.r")
clean_proximity <- function(poly,treshold) {
i <- 1:(nrow(poly)-1)
return(poly[HaversineDistance(poly[i,1],poly[i,2],poly[i+1,1],poly[i+1,2])>treshold,])
}
rm(x)
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
plot_trip(train_full[6,])
plot_trip(train_full[7,])
x <- positions(train_full[7,])
x
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
y <- clean_proximity(x,100)
y
y <- clean_proximity(x,10)
y
y <- clean_proximity(x,0.0000001)
y
y <- clean_proximity(x,0.100)
y
y <- clean_proximity(x,0.200)
y
plot_trip(y)
y <- clean_proximity(x,0.100)
plot_trip(y)
y
View(y)
y <- clean_proximity(x,0.050)
plot_trip(y)
y <- clean_proximity(x,0.080)
plot_trip(y)
y <- clean_proximity(x,0.100)
plot_trip(y)
rm(x,y)
train <- train_full[1:1000]
train <- train_full[1:1000,]
test_kaggle <- read.csv(paste(getwd(),"/../original data/test.csv",sep=""),stringsAsFactors=FALSE)
step <- 5
gap <- 3
rm(test_kaggle)
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
s
train_ready <- disassembleData(train, step, gap, start=0.4, end=0.9) #, clean=0.100) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
View(train_ready)
train_ready <- disassembleData(train, step, gap, start=0.4, end=0.9) #, clean=0.100) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
View(train_ready)
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
train_ready <- disassembleData(train, step, gap, start=0.4, end=0.9) #, clean=0.100) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
View(train_ready)
train[1,]
?tail
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
train_ready <- disassembleData(train, step, gap, start=0.4, end=0.9) #, clean=0.100) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
train_ready <- disassembleData(train, step, gap, start=0.4, end=0.9, clean=0.100) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
View(train_ready)
train <- train_full[1:1000000,]
rm(train_ready,train_full)
setwd("~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2")
library(rpart)
source("/../utils.r")
?source
source(file="/../utils.r")
source(paste(getwd(),"/../utils.r",sep=""))
paste(getwd(),"/../utils.r",sep="")
source(paste(getwd(),"/../utils.r",sep=""))
source("utils.r")
source("stepAnova_utils.r")
avg(1:2,1:2)
step <- 5
gap <- 3
train_ready <- disassembleData(train, step, gap, start=0.4, end=0.9, clean=0.100) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
write.csv(train_ready, file = "train_ready_anova_from1M.csv", row.names = FALSE)
# train_ready <- read.csv(paste(getwd(),"/train_ready_anova_from50k.csv",sep=""),stringsAsFactors=FALSE)
### TRAINING ###
# check the documentation for more fun!
# THE NAMES OF THE COLUMNS MUST BE CHANGED BY HAND WHEN CHANGING THE STEP
fit_long <- rpart(dest_long ~ LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, method="anova", minsplit=5, cp=0.001)
save(fit_long,file="tree_long_1M_split5_cp001")
fit_lat <- rpart(dest_lat ~ LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, method="anova", minsplit=5, cp=0.001)
save(fit_lat,file="tree_lat_1M_split5_cp001")
### CLASSIFICATION ###
test <- read.csv(paste(getwd(),"/../original data/test.csv",sep=""),stringsAsFactors=FALSE)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- positions(test[i,])
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
### EVALUATION ###
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
evaluation <- evaluate(prediction,answer)
print(evaluation)
View(train_ready)
View(train)
gc()
clean <- 0.100
test <- read.csv(paste(getwd(),"/../original data/test.csv",sep=""),stringsAsFactors=FALSE)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- clean_proximity(positions(test[i,]),clean)
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
trip <- clean_proximity(positions(test[1,]),clean)
trip
positions(test[1,]),clean
positions(test[1,])
plot_trip(positions(test[1,]))
trip <- clean_proximity(positions(test[1,]),0.05)
plot_trip(trip
)
trip <- clean_proximity(positions(test[1,]),0.02)
plot_trip(trip)
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
test_trip
trip <- clean_proximity(positions(test[i,]),0.02)
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
test_trip
predict(fit_lat, test_trip)
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep="")) # cose a caso
dest_lat <- avg(predict(fit_lat, test_trip),weights)
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep="")) # cose a caso
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_lat
test_trip
plot(trip)
plot_trip(trip)
predict(fit_lat, test_trip
)
summary(fit_lat)
test <- read.csv(paste(getwd(),"/../mydata/test_2k.csv",sep=""),stringsAsFactors=FALSE)
answer <- read.csv(paste(getwd(),"/../mydata/answer_2k.csv",sep=""),stringsAsFactors=FALSE)
test <- read.csv(paste(getwd(),"/../mydata/test_2k.csv",sep=""),stringsAsFactors=FALSE)[1:320]
test <- read.csv(paste(getwd(),"/../mydata/test_2k.csv",sep=""),stringsAsFactors=FALSE)[1:320,]
answer <- read.csv(paste(getwd(),"/../mydata/answer_2k.csv",sep=""),stringsAsFactors=FALSE)[1:320,]
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- clean_proximity(positions(test[i,]),0.02)
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep="")) # cose a caso
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
evaluation <- evaluate(prediction,answer)
print(evaluation)
train <- train[1:500000,]
rm(train_ready,dest,answer,test,test_trip,trip)
rm(prediction)
plot_trip(positions(train[9,]))
plot_trip(clean(positions(train[9,]),0.03))
plot_trip(clean_proximity(positions(train[9,]),0.03))
plot_trip(positions(train[9,]))
plot_trip(clean_proximity(positions(train[9,]),0.03))
plot_trip(clean_proximity(positions(train[9,]),0.05))
plot_trip(clean_proximity(positions(train[9,]),0.1))
trip <- clean_proximity(positions(train[9,]),0.03)
trip
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
test_trip
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
test_trip
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
test_trip
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
test_trip
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
test_trip
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepAnova v0.2/stepAnova_utils.r')
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
test_trip
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep="")) # cose a caso
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
c(dest_lat,dest_long)
rev(c(dest_lat,dest_long))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep="")) # cose a caso
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
predict(fit_lat, test_trip)
library(rpart)
source("utils.r")
source("stepAnova_utils.r")
rm(fit_lat,fit_long)
test <- read.csv(paste(getwd(),"/../mydata/test_2k.csv",sep=""),stringsAsFactors=FALSE)
answer <- read.csv(paste(getwd(),"/../mydata/answer_2k.csv",sep=""),stringsAsFactors=FALSE)
step <- 5
gap <- 3
clean <- 0.050
train_ready <- disassembleData(train, step, gap, start=0.6, end=0.9, clean) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/utils.r')
step <- 5
gap <- 3
clean <- 0.050
train_ready <- disassembleData(train, step, gap, start=0.6, end=0.9, clean) #i parametri da cambiare sono dentro alla funzione, ma possono essere facilmente portati qui
write.csv(train_ready, file = "train_ready_anova_from500k_clean50.csv", row.names = FALSE)
# train_ready <- read.csv(paste(getwd(),"/train_ready_anova_from50k.csv",sep=""),stringsAsFactors=FALSE)
### TRAINING ###
# check the documentation for more fun!
# THE NAMES OF THE COLUMNS MUST BE CHANGED BY HAND WHEN CHANGING THE STEP
fit_long <- rpart(dest_long ~ LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, method="anova", minsplit=5, cp=0.001)
save(fit_long,file="tree_long_500k_split5_cp001_clean50")
fit_lat <- rpart(dest_lat ~ LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, method="anova", minsplit=5, cp=0.001)
save(fit_lat,file="tree_lat_1M_split5_cp001_clean50")
### CLASSIFICATION ###
#test <- read.csv(paste(getwd(),"/../original data/test.csv",sep=""),stringsAsFactors=FALSE)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- clean_proximity(positions(test[i,]),0.03)
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep=""))
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
### EVALUATION ###
#write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
evaluation <- evaluate(prediction,answer)
print(evaluation)
View(train_ready)
View(train_ready)
plot_trip(train_ready[3:8,1:2])
plot_trip(train[2,])
plot_trip(positions(train[2,]))
plot_trip(train[2,])
plot_trip(positions(train[2,]))
plot_trip(train_ready[3:8,1:2])
test <- read.csv(paste(getwd(),"/../original data/test.csv",sep=""),stringsAsFactors=FALSE)
positions(test[3,])
plot_trip(positions(test[i,]))
plot_trip(positions(test[3,]))
trip <- clean_proximity(positions(test[i,]),0.03)
trip <- clean_proximity(positions(test[3,]),0.03)
plot_trip(trip)
trip <- clean_proximity(positions(test[3,]),0.05)
plot_trip(trip)
trip <- clean_proximity(positions(test[3,]),0.1)
plot_trip(trip)
trip <- clean_proximity(positions(test[3,]),0.08)
plot_trip(trip)
trip <- clean_proximity(positions(test[6,]),0.0)
plot_trip(trip)
trip <- clean_proximity(positions(test[6,]),0.08)
plot_trip(trip)
trip <- clean_proximity(positions(test[6,]),0.03)
plot_trip(trip)
trip <- clean_proximity(positions(test[6,]),0.0)
plot_trip(trip)
test <- read.csv(paste(getwd(),"/../mydata/test_2k.csv",sep=""),stringsAsFactors=FALSE)
test <- create_test(tail(train,1000))
source('~/.active-rstudio-document')
test <- create_test(tail(train,1000))
answer <- create_answer(tail(train,1000))
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- clean_proximity(positions(test[i,]),0.03)
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep=""))
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
evaluation <- evaluate(prediction,answer)
print(evaluation)
test <- create_test(tail(train_ready,1000))
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- clean_proximity(positions(test[i,]),0.05)
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep=""))
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
### EVALUATION ###
#write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
evaluation <- evaluate(prediction,answer)
print(evaluation)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- clean_proximity(positions(test[i,]),0.01)
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep=""))
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
evaluation <- evaluate(prediction,answer)
print(evaluation)
test <- read.csv(paste(getwd(),"/../original data/test.csv",sep=""),stringsAsFactors=FALSE)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
trip <- clean_proximity(positions(test[i,]),0.03)
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- as.data.frame(disassemble(trip, step, gap, start=0.3, end=1))
colnames(test_trip) <- c(paste(c("LONG","LAT"),rbind(1:step,1:step),sep=""))
weights <- 1:nrow(test_trip)
dest_lat <- avg(predict(fit_lat, test_trip),weights)
dest_long <- avg(predict(fit_long, test_trip),weights)
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest_lat,dest_long)
}
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
test <- create_test(tail(train,1000))
write.csv(test, file = "test_1k.csv", row.names = FALSE)
write.csv(answer, file = "answer_1k.csv", row.names = FALSE)
test <- read.csv(paste(getwd(),"/../mydata/test_1k.csv",sep=""),stringsAsFactors=FALSE)
answer <- read.csv(paste(getwd(),"/../mydata/answer_1k.csv",sep=""),stringsAsFactors=FALSE)
