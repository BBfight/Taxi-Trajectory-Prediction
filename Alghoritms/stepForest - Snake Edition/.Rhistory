if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
x <- x+1
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
fit <- randomForest(destination ~ dayPhase + LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=2, importance=TRUE)
summary(fit)
fit$importance
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
View(original_trip)
fit <- randomForest(destination ~ LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=2, importance=TRUE)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
#     dayPhase <- timeToPhase(test[i,]$TIME)
#     test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepForest - Snake Edition/utils.r')
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
#     dayPhase <- timeToPhase(test[i,]$TIME)
#     test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
View(prediction)
fit <- randomForest(destination ~ dayPhase + LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=2)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(as.factor(dayPhase),test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
fit <- randomForest(destination ~ as.factor(dayPhase) + LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=100)
fit <- randomForest(destination ~ LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=100)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
#     dayPhase <- timeToPhase(test[i,]$TIME)
#     test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
View(prediction)
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
View(prediction)
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepForest - Snake Edition/utils.r')
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
#     dayPhase <- timeToPhase(test[i,]$TIME)
#     test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
source('~/.active-rstudio-document')
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
#     dayPhase <- timeToPhase(test[i,]$TIME)
#     test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
View(prediction)
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
x <- 0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
x <- x+1
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
#     dayPhase <- timeToPhase(test[i,]$TIME)
#     test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
step <- 5
gap <- 3
train_ready <- disassembleData(train, step, gap, start=0.3, end=0.8)
train_ready[is.na(train_ready),]
View(train_ready)
train <- train[1000,]
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepForest - Snake Edition/utils.r')
step <- 5
gap <- 3
train_ready <- disassembleData(train, step, gap, start=0.3, end=0.8)
train <- train_medium[1:1000,]
step <- 5
gap <- 3
train_ready <- disassembleData(train, step, gap, start=0.3, end=0.8)
fit <- randomForest(destination ~ dayPhase + LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=100)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
rm(test_trip,train,train_ready)
gc()
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepForest - Snake Edition/utils.r')
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepForest - Snake Edition/stepForest_utils.r')
train <- train_medium[1:20000,]
step <- 5
gap <- 3
train_ready <- disassembleData(train, step, gap, start=0.3, end=0.8)
fit <- randomForest(destination ~ dayPhase + LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=100)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
View(prediction)
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
print(i)
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
#     prediction_dest <- predict(fit,test_trip)
#     dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
#   prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
plot_trip(positions(test[257,]))
plot_trip(square_transform(clean_error(positions(test[257,]),0.8)))
x <- 0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
x <- x+1
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
#     prediction_dest <- predict(fit,test_trip)
#     dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
#   prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
x
y<-0
x<-0
y<-0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
y <- y+1
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))
if(nrow(trip)<=step){
x <- x+1
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
#     prediction_dest <- predict(fit,test_trip)
#     dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
#   prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
x
y
x<-0
y<-0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
y <- y+1
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8),edge_lat=0.00225, edge_long=0.003)
if(nrow(trip)<=step){
x <- x+1
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
#     prediction_dest <- predict(fit,test_trip)
#     dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
#   prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
x
y
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepForest - Snake Edition/stepForest_utils.r')
step <- 5
gap <- 3
train_ready <- disassembleData(train, step, gap, start=0.3, end=0.8)
source('~/Polimi/Magistrale/Anno I/Semestre II/Data Mining and Text Mining/Project Taxi/stepForest - Snake Edition/stepForest_utils.r')
step <- 5
gap <- 3
train_ready <- disassembleData(train, step, gap, start=0.3, end=0.8)
fit <- randomForest(destination ~ callType + dayWeek + dayPhase + LONG1 + LAT1 + LONG2 + LAT2 + LONG3 + LAT3 + LONG4 + LAT4 + LONG5 + LAT5
, data=train_ready, ntree=100)
x<-0
y<-0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
y <- y+1
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))#,edge_lat=0.00225, edge_long=0.003)
if(nrow(trip)<=step){
x <- x+1
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
x<-0
y<-0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
y <- y+1
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))#,edge_lat=0.00225, edge_long=0.003)
if(nrow(trip)<=step){
x <- x+1
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
dayWeek <- timeToDay(test[i,]$TIME)
callType <- test[i,]$CALL_TYPE
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
levels(test_trip$dayWeek) <- levels(train_ready$dayWeek)
levels(test_trip$callType) <- levels(train_ready$callType)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
View(train_ready)
x<-0
y<-0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
y <- y+1
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))#,edge_lat=0.00225, edge_long=0.003)
if(nrow(trip)<=step){
x <- x+1
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
dayWeek <- timeToDay(test[i,]$TIME)
callType <- test[i,]$CALL_TYPE
test_trip <- cbind(dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
#     levels(test_trip$dayWeek) <- levels(train_ready$dayWeek)
levels(test_trip$callType) <- levels(train_ready$callType)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
x<-0
y<-0
N <- nrow(test)
prediction <- data.frame(TRIP_ID = 1:N, LATITUDE = 1:N, LONGITUDE = 1:N)
for(i in 1:N){
original_trip <- positions(test[i,])
if(nrow(original_trip)<2){
y <- y+1
dest <- rev(tail(original_trip,1))
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
next
}
trip <- square_transform(clean_error(original_trip,0.8))#,edge_lat=0.00225, edge_long=0.003)
if(nrow(trip)<=step){
x <- x+1
dest <- rev(tail(trip,1))
} else {
test_trip <- disassemble(trip, step, gap, start=0.3, end=1)
dayPhase <- timeToPhase(test[i,]$TIME)
dayWeek <- timeToDay(test[i,]$TIME)
callType <- test[i,]$CALL_TYPE
test_trip <- cbind(callType,dayWeek,dayPhase,test_trip)
levels(test_trip$dayPhase) <- levels(train_ready$dayPhase)
levels(test_trip$dayWeek) <- levels(train_ready$dayWeek)
levels(test_trip$callType) <- levels(train_ready$callType)
prediction_dest <- predict(fit,test_trip)
dest <- rev(extractPrediction(as.vector(prediction_dest)))
}
prediction[i,] <- c(test[i,"TRIP_ID"], dest)
}
View(prediction)
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
write.csv(prediction, file = "myprediction.csv", row.names = FALSE)
